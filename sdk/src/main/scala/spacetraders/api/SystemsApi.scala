/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package spacetraders.api

import spacetraders.model.GetJumpGate200Response
import spacetraders.model.GetMarket200Response
import spacetraders.model.GetShipyard200Response
import spacetraders.model.GetSystem200Response
import spacetraders.model.GetSystemWaypoints200Response
import spacetraders.model.GetSystems200Response
import spacetraders.model.GetWaypoint200Response
import spacetraders.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SystemsApi {

def apply(baseUrl: String = "https://api.spacetraders.io/v2") = new SystemsApi(baseUrl)
}

class SystemsApi(baseUrl: String) {

  /**
   * Get jump gate details for a waypoint. Requires a waypoint of type `JUMP_GATE` to use.  The response will return all systems that are have a Jump Gate in range of this Jump Gate. Those systems can be jumped to from this Jump Gate.
   * 
   * Expected answers:
   *   code 200 : GetJumpGate200Response (Successfully fetched jump gate.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   * @param waypointSymbol The waypoint symbol
   */
  def getJumpGate(bearerToken: String)(systemSymbol: String, waypointSymbol: String
): Request[Either[ResponseException[String, Exception], GetJumpGate200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}/waypoints/${waypointSymbol}/jump-gate")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetJumpGate200Response])

  /**
   * Retrieve imports, exports and exchange data from a marketplace. Requires a waypoint that has the `Marketplace` trait to use.  Send a ship to the waypoint to access trade good prices and recent transactions. Refer to the [Market Overview page](https://docs.spacetraders.io/game-concepts/markets) to gain better a understanding of the market in the game.
   * 
   * Expected answers:
   *   code 200 : GetMarket200Response (Successfully fetched the market.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   * @param waypointSymbol The waypoint symbol
   */
  def getMarket(bearerToken: String)(systemSymbol: String, waypointSymbol: String
): Request[Either[ResponseException[String, Exception], GetMarket200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}/waypoints/${waypointSymbol}/market")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetMarket200Response])

  /**
   * Get the shipyard for a waypoint. Requires a waypoint that has the `Shipyard` trait to use. Send a ship to the waypoint to access data on ships that are currently available for purchase and recent transactions.
   * 
   * Expected answers:
   *   code 200 : GetShipyard200Response (Successfully fetched the shipyard.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   * @param waypointSymbol The waypoint symbol
   */
  def getShipyard(bearerToken: String)(systemSymbol: String, waypointSymbol: String
): Request[Either[ResponseException[String, Exception], GetShipyard200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}/waypoints/${waypointSymbol}/shipyard")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetShipyard200Response])

  /**
   * Get the details of a system.
   * 
   * Expected answers:
   *   code 200 : GetSystem200Response (Successfully fetched the system.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   */
  def getSystem(bearerToken: String)(systemSymbol: String
): Request[Either[ResponseException[String, Exception], GetSystem200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetSystem200Response])

  /**
   * Return a paginated list of all of the waypoints for a given system.  If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
   * 
   * Expected answers:
   *   code 200 : GetSystemWaypoints200Response (Successfully fetched all waypoints in the system.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   * @param page What entry offset to request
   * @param limit How many entries to return per page
   */
  def getSystemWaypoints(bearerToken: String)(systemSymbol: String, page: Option[Int] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], GetSystemWaypoints200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}/waypoints?page=${ page }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetSystemWaypoints200Response])

  /**
   * Return a paginated list of all systems.
   * 
   * Expected answers:
   *   code 200 : GetSystems200Response (Successfully listed systems.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param page What entry offset to request
   * @param limit How many entries to return per page
   */
  def getSystems(bearerToken: String)(page: Option[Int] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], GetSystems200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems?page=${ page }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetSystems200Response])

  /**
   * View the details of a waypoint.  If the waypoint is uncharted, it will return the 'Uncharted' trait instead of its actual traits.
   * 
   * Expected answers:
   *   code 200 : GetWaypoint200Response (Successfully fetched waypoint.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param systemSymbol The system symbol
   * @param waypointSymbol The waypoint symbol
   */
  def getWaypoint(bearerToken: String)(systemSymbol: String, waypointSymbol: String
): Request[Either[ResponseException[String, Exception], GetWaypoint200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/systems/${systemSymbol}/waypoints/${waypointSymbol}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetWaypoint200Response])

}
