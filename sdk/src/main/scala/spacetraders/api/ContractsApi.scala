/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package spacetraders.api

import spacetraders.model.AcceptContract200Response
import spacetraders.model.DeliverContract200Response
import spacetraders.model.DeliverContractRequest
import spacetraders.model.FulfillContract200Response
import spacetraders.model.GetContract200Response
import spacetraders.model.GetContracts200Response
import spacetraders.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object ContractsApi {

def apply(baseUrl: String = "https://api.spacetraders.io/v2") = new ContractsApi(baseUrl)
}

class ContractsApi(baseUrl: String) {

  /**
   * Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
   * 
   * Expected answers:
   *   code 200 : AcceptContract200Response (Succesfully accepted contract.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param contractId The contract ID to accept.
   */
  def acceptContract(bearerToken: String)(contractId: String
): Request[Either[ResponseException[String, Exception], AcceptContract200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/my/contracts/${contractId}/accept")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[AcceptContract200Response])

  /**
   * Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as `destinationSymbol` of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship's cargo.
   * 
   * Expected answers:
   *   code 200 : DeliverContract200Response (Successfully delivered cargo to contract.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param contractId The ID of the contract.
   * @param deliverContractRequest 
   */
  def deliverContract(bearerToken: String)(contractId: String, deliverContractRequest: Option[DeliverContractRequest] = None
): Request[Either[ResponseException[String, Exception], DeliverContract200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/my/contracts/${contractId}/deliver")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .body(deliverContractRequest)
      .response(asJson[DeliverContract200Response])

  /**
   * Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
   * 
   * Expected answers:
   *   code 200 : FulfillContract200Response (Successfully fulfilled a contract.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param contractId The ID of the contract to fulfill.
   */
  def fulfillContract(bearerToken: String)(contractId: String
): Request[Either[ResponseException[String, Exception], FulfillContract200Response], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/my/contracts/${contractId}/fulfill")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[FulfillContract200Response])

  /**
   * Get the details of a contract by ID.
   * 
   * Expected answers:
   *   code 200 : GetContract200Response (Successfully fetched contract.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param contractId The contract ID
   */
  def getContract(bearerToken: String)(contractId: String
): Request[Either[ResponseException[String, Exception], GetContract200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/my/contracts/${contractId}")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetContract200Response])

  /**
   * Return a paginated list of all your contracts.
   * 
   * Expected answers:
   *   code 200 : GetContracts200Response (Succesfully listed contracts.)
   * 
   * Available security schemes:
   *   AgentToken (http)
   * 
   * @param page What entry offset to request
   * @param limit How many entries to return per page
   */
  def getContracts(bearerToken: String)(page: Option[Int] = None, limit: Option[Int] = None
): Request[Either[ResponseException[String, Exception], GetContracts200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/my/contracts?page=${ page }&limit=${ limit }")
      .contentType("application/json")
      .auth.bearer(bearerToken)
      .response(asJson[GetContracts200Response])

}
