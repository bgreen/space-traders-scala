/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package spacetraders.model


case class FactionTrait(
  /* The unique identifier of the trait. */
  symbol: FactionTraitEnums.Symbol,
  /* The name of the trait. */
  name: String,
  /* A description of the trait. */
  description: String
)

object FactionTraitEnums {

  type Symbol = Symbol.Value
  object Symbol extends Enumeration {
    val BUREAUCRATIC = Value("BUREAUCRATIC")
    val SECRETIVE = Value("SECRETIVE")
    val CAPITALISTIC = Value("CAPITALISTIC")
    val INDUSTRIOUS = Value("INDUSTRIOUS")
    val PEACEFUL = Value("PEACEFUL")
    val DISTRUSTFUL = Value("DISTRUSTFUL")
    val WELCOMING = Value("WELCOMING")
    val SMUGGLERS = Value("SMUGGLERS")
    val SCAVENGERS = Value("SCAVENGERS")
    val REBELLIOUS = Value("REBELLIOUS")
    val EXILES = Value("EXILES")
    val PIRATES = Value("PIRATES")
    val RAIDERS = Value("RAIDERS")
    val CLAN = Value("CLAN")
    val GUILD = Value("GUILD")
    val DOMINION = Value("DOMINION")
    val FRINGE = Value("FRINGE")
    val FORSAKEN = Value("FORSAKEN")
    val ISOLATED = Value("ISOLATED")
    val LOCALIZED = Value("LOCALIZED")
    val ESTABLISHED = Value("ESTABLISHED")
    val NOTABLE = Value("NOTABLE")
    val DOMINANT = Value("DOMINANT")
    val INESCAPABLE = Value("INESCAPABLE")
    val INNOVATIVE = Value("INNOVATIVE")
    val BOLD = Value("BOLD")
    val VISIONARY = Value("VISIONARY")
    val CURIOUS = Value("CURIOUS")
    val DARING = Value("DARING")
    val EXPLORATORY = Value("EXPLORATORY")
    val RESOURCEFUL = Value("RESOURCEFUL")
    val FLEXIBLE = Value("FLEXIBLE")
    val COOPERATIVE = Value("COOPERATIVE")
    val UNITED = Value("UNITED")
    val STRATEGIC = Value("STRATEGIC")
    val INTELLIGENT = Value("INTELLIGENT")
    val RESEARCHFOCUSED = Value("RESEARCH_FOCUSED")
    val COLLABORATIVE = Value("COLLABORATIVE")
    val PROGRESSIVE = Value("PROGRESSIVE")
    val MILITARISTIC = Value("MILITARISTIC")
    val TECHNOLOGICALLYADVANCED = Value("TECHNOLOGICALLY_ADVANCED")
    val AGGRESSIVE = Value("AGGRESSIVE")
    val IMPERIALISTIC = Value("IMPERIALISTIC")
    val TREASUREHUNTERS = Value("TREASURE_HUNTERS")
    val DEXTEROUS = Value("DEXTEROUS")
    val UNPREDICTABLE = Value("UNPREDICTABLE")
    val BRUTAL = Value("BRUTAL")
    val FLEETING = Value("FLEETING")
    val ADAPTABLE = Value("ADAPTABLE")
    val SELFSUFFICIENT = Value("SELF_SUFFICIENT")
    val DEFENSIVE = Value("DEFENSIVE")
    val PROUD = Value("PROUD")
    val DIVERSE = Value("DIVERSE")
    val INDEPENDENT = Value("INDEPENDENT")
    val SELFINTERESTED = Value("SELF_INTERESTED")
    val FRAGMENTED = Value("FRAGMENTED")
    val COMMERCIAL = Value("COMMERCIAL")
    val FREEMARKETS = Value("FREE_MARKETS")
    val ENTREPRENEURIAL = Value("ENTREPRENEURIAL")
  }

}
