/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package spacetraders.model


  /**
   * A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.
   */
case class ShipModule(
  /* The symbol of the module. */
  symbol: ShipModuleEnums.Symbol,
  /* Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants. */
  capacity: Option[Int] = None,
  /* Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities. */
  range: Option[Int] = None,
  /* Name of this module. */
  name: String,
  /* Description of this module. */
  description: String,
  requirements: ShipRequirements
)

object ShipModuleEnums {

  type Symbol = Symbol.Value
  object Symbol extends Enumeration {
    val MODULEMINERALPROCESSORI = Value("MODULE_MINERAL_PROCESSOR_I")
    val MODULECARGOHOLDI = Value("MODULE_CARGO_HOLD_I")
    val MODULECREWQUARTERSI = Value("MODULE_CREW_QUARTERS_I")
    val MODULEENVOYQUARTERSI = Value("MODULE_ENVOY_QUARTERS_I")
    val MODULEPASSENGERCABINI = Value("MODULE_PASSENGER_CABIN_I")
    val MODULEMICROREFINERYI = Value("MODULE_MICRO_REFINERY_I")
    val MODULEOREREFINERYI = Value("MODULE_ORE_REFINERY_I")
    val MODULEFUELREFINERYI = Value("MODULE_FUEL_REFINERY_I")
    val MODULESCIENCELABI = Value("MODULE_SCIENCE_LAB_I")
    val MODULEJUMPDRIVEI = Value("MODULE_JUMP_DRIVE_I")
    val MODULEJUMPDRIVEII = Value("MODULE_JUMP_DRIVE_II")
    val MODULEJUMPDRIVEIII = Value("MODULE_JUMP_DRIVE_III")
    val MODULEWARPDRIVEI = Value("MODULE_WARP_DRIVE_I")
    val MODULEWARPDRIVEII = Value("MODULE_WARP_DRIVE_II")
    val MODULEWARPDRIVEIII = Value("MODULE_WARP_DRIVE_III")
    val MODULESHIELDGENERATORI = Value("MODULE_SHIELD_GENERATOR_I")
    val MODULESHIELDGENERATORII = Value("MODULE_SHIELD_GENERATOR_II")
  }

}
