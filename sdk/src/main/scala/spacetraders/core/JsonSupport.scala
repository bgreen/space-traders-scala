/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package spacetraders.core

import spacetraders.model._
import io.circe.{Decoder, Encoder}
import io.circe.generic.AutoDerivation
import sttp.client3.circe.SttpCirceApi

object JsonSupport extends SttpCirceApi with AutoDerivation with DateSerializers with AdditionalTypeSerializers {

  implicit val FactionSymbolsDecoder: Decoder[FactionSymbols.FactionSymbols] = Decoder.decodeEnumeration(FactionSymbols)
  implicit val FactionSymbolsEncoder: Encoder[FactionSymbols.FactionSymbols] = Encoder.encodeEnumeration(FactionSymbols)
  implicit val ShipNavFlightModeDecoder: Decoder[ShipNavFlightMode.ShipNavFlightMode] = Decoder.decodeEnumeration(ShipNavFlightMode)
  implicit val ShipNavFlightModeEncoder: Encoder[ShipNavFlightMode.ShipNavFlightMode] = Encoder.encodeEnumeration(ShipNavFlightMode)
  implicit val ShipNavStatusDecoder: Decoder[ShipNavStatus.ShipNavStatus] = Decoder.decodeEnumeration(ShipNavStatus)
  implicit val ShipNavStatusEncoder: Encoder[ShipNavStatus.ShipNavStatus] = Encoder.encodeEnumeration(ShipNavStatus)
  implicit val ShipRoleDecoder: Decoder[ShipRole.ShipRole] = Decoder.decodeEnumeration(ShipRole)
  implicit val ShipRoleEncoder: Encoder[ShipRole.ShipRole] = Encoder.encodeEnumeration(ShipRole)
  implicit val ShipTypeDecoder: Decoder[ShipType.ShipType] = Decoder.decodeEnumeration(ShipType)
  implicit val ShipTypeEncoder: Encoder[ShipType.ShipType] = Encoder.encodeEnumeration(ShipType)
  implicit val SystemTypeDecoder: Decoder[SystemType.SystemType] = Decoder.decodeEnumeration(SystemType)
  implicit val SystemTypeEncoder: Encoder[SystemType.SystemType] = Encoder.encodeEnumeration(SystemType)
  implicit val TradeSymbolDecoder: Decoder[TradeSymbol.TradeSymbol] = Decoder.decodeEnumeration(TradeSymbol)
  implicit val TradeSymbolEncoder: Encoder[TradeSymbol.TradeSymbol] = Encoder.encodeEnumeration(TradeSymbol)
  implicit val WaypointTypeDecoder: Decoder[WaypointType.WaypointType] = Decoder.decodeEnumeration(WaypointType)
  implicit val WaypointTypeEncoder: Encoder[WaypointType.WaypointType] = Encoder.encodeEnumeration(WaypointType)
}
